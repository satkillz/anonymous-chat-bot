import asyncio
import logging
import time
import random
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("MODERATION_CHANNEL_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –î–ê–ù–ù–´–ï ===
users = {}  # user_id -> {own_gender, search_preference}
search_queue = set()
active_sessions = {}

# === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
user_requests = defaultdict(list)
user_media_count = defaultdict(list)
user_actions = defaultdict(list)
captcha_challenges = {}

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
class UserState(StatesGroup):
    choosing_own_gender = State()
    choosing_search_pref = State()
    in_chat = State()
    waiting_for_captcha = State()
    in_search = State()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_own_gender_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_search_pref_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–æ–ª—å–∫–æ –ø–∞—Ä–Ω–∏")],
            [KeyboardButton(text="–¢–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏")],
            [KeyboardButton(text="–ú–∏–∫—Å (–ª—é–±–æ–π)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_search_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/stop")]],
        resize_keyboard=True
    )

def get_chat_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/next"), KeyboardButton(text="/stop"), KeyboardButton(text="/link")]
        ],
        resize_keyboard=True
    )

def get_idle_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/search"), KeyboardButton(text="/gender")]
        ],
        resize_keyboard=True
    )

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def is_rate_limited(user_id: int) -> bool:
    now = time.time()
    user_requests[user_id] = [t for t in user_requests[user_id] if now - t < 60]
    if len(user_requests[user_id]) >= 5:
        return True
    user_requests[user_id].append(now)
    return False

def is_media_limited(user_id: int) -> bool:
    now = time.time()
    user_media_count[user_id] = [t for t in user_media_count[user_id] if now - t < 60]
    if len(user_media_count[user_id]) >= 25:
        return True
    user_media_count[user_id].append(now)
    return False

def check_for_captcha(user_id: int, action: str) -> bool:
    now = time.time()
    user_actions[user_id] = [a for a in user_actions[user_id] if now - a[1] < 600]
    user_actions[user_id].append((action, now))
    actions = [a[0] for a in user_actions[user_id]]
    return actions.count(action) >= 3

def generate_captcha(user_id: int):
    emojis = ["üçé", "üöó", "üòä", "üê±", "üåà", "üçï", "üöÄ", "‚öΩ", "üéÆ", "üìö"]
    correct = random.choice(emojis)
    captcha_challenges[user_id] = correct
    options = random.sample([e for e in emojis if e != correct], 5) + [correct]
    random.shuffle(options)
    return correct, options

def get_search_text(preference: str) -> str:
    if preference == "male":
        return "–ø–∞—Ä–Ω—è"
    elif preference == "female":
        return "–¥–µ–≤—É—à–∫—É"
    else:
        return "—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    if user_id not in users:
        await state.set_state(UserState.choosing_own_gender)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_own_gender_kb())
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_idle_kb())

@dp.message(UserState.choosing_own_gender)
async def choose_own_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    own_gender = "male" if message.text == "–ú—É–∂—á–∏–Ω–∞" else "female"
    users[message.from_user.id] = {"own_gender": own_gender}
    await state.set_state(UserState.choosing_search_pref)
    await message.answer("–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?", reply_markup=get_search_pref_kb())

@dp.message(UserState.choosing_search_pref)
async def choose_search_pref(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    if text == "–¢–æ–ª—å–∫–æ –ø–∞—Ä–Ω–∏":
        users[user_id]["search_preference"] = "male"
    elif text == "–¢–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏":
        users[user_id]["search_preference"] = "female"
    elif text == "–ú–∏–∫—Å (–ª—é–±–æ–π)":
        users[user_id]["search_preference"] = "any"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.clear()
    pref_text = get_search_text(users[user_id]["search_preference"])
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –∏—â–∏—Ç–µ {pref_text} —á–µ—Ä–µ–∑ /search", reply_markup=get_idle_kb())

@dp.message(Command("gender"))
async def cmd_gender(message: types.Message, state: FSMContext):
    if is_rate_limited(message.from_user.id):
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É.")
        return
    await state.set_state(UserState.choosing_search_pref)
    await message.answer("–ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_pref_kb())

@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    if is_rate_limited(message.from_user.id):
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É.")
        return

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    if user_id in active_sessions:
        await message.answer("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ!", reply_markup=get_chat_kb())
        return
    if user_id in search_queue:
        await message.answer("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ...", reply_markup=get_search_kb())
        return

    if check_for_captcha(user_id, "search"):
        correct, options = generate_captcha(user_id)
        opts_text = " ".join(options)
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–∏–¥–µ–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö: ({correct})\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {opts_text}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(UserState.waiting_for_captcha)
        return

    search_queue.add(user_id)
    await state.set_state(UserState.in_search)
    pref = users[user_id]["search_preference"]
    target_text = get_search_text(pref)
    await message.answer(f"–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ üôè, –∏—â–µ–º üîé {target_text}...", reply_markup=get_search_kb())

    start_time = time.time()
    warned = False

    async def _search_task():
        nonlocal warned
        try:
            while time.time() - start_time < 300:  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
                await asyncio.sleep(0.5)
                if user_id not in search_queue:
                    return

                pref = users[user_id]["search_preference"]
                for candidate in list(search_queue):
                    if candidate == user_id or candidate in active_sessions:
                        continue
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
                    if pref == "any":
                        match = True
                    else:
                        match = users.get(candidate, {}).get("own_gender") == pref

                    if match:
                        search_queue.discard(user_id)
                        search_queue.discard(candidate)
                        active_sessions[user_id] = candidate
                        active_sessions[candidate] = user_id
                        await state.set_state(UserState.in_chat)
                        await bot.send_message(
                            user_id,
                            "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—èü´∂üèª\n/next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                            reply_markup=get_chat_kb()
                        )
                        await bot.send_message(
                            candidate,
                            "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—èü´∂üèª\n/next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                            reply_markup=get_chat_kb()
                        )
                        return

                # –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–∏–∫—Å
                if not warned and time.time() - start_time > 120 and pref in ("male", "female"):
                    warned = True
                    await bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –î–æ–ª–≥–æ –Ω–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª–∞.\n"
                        "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–º–∏–∫—Å)?\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gender, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        reply_markup=get_idle_kb()
                    )
            # –¢–∞–π–º–∞—É—Ç
            if user_id in search_queue:
                search_queue.discard(user_id)
                await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_idle_kb())
        except asyncio.CancelledError:
            pass

    asyncio.create_task(_search_task())

@dp.message(UserState.waiting_for_captcha)
async def handle_captcha(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    correct = captcha_challenges.get(user_id)
    if correct and message.text.strip() == correct:
        del captcha_challenges[user_id]
        await state.clear()
        await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!", reply_markup=get_idle_kb())
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ 4 —á–∞—Å–∞.")
        await state.clear()

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    if current_state == UserState.in_search.state:
        if user_id in search_queue:
            search_queue.discard(user_id)
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_idle_kb())
        return

    if user_id in active_sessions:
        partner_id = active_sessions.pop(user_id)
        active_sessions.pop(partner_id, None)
        await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=get_idle_kb())
        await state.clear()
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_idle_kb())
        return

    await message.answer("–í—ã –Ω–µ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_idle_kb())

@dp.message(Command("next"))
async def cmd_next(message: types.Message, state: FSMContext):
    await cmd_stop(message, state)

@dp.message(Command("link"))
async def cmd_link(message: types.Message):
    if message.from_user.id not in active_sessions:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return
    if message.from_user.username:
        partner_id = active_sessions[message.from_user.id]
        await bot.send_message(partner_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º: https://t.me/{message.from_user.username}")
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.message()
async def handle_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–∏—Å–∫–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–æ –ª—É—á—à–µ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å —Å—é–¥–∞)
    if user_id in search_queue:
        await message.answer("–í—ã –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=get_search_kb())
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º idle
    if user_id not in active_sessions:
        if not (message.text and message.text.startswith("/")):
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_idle_kb())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞
    if message.photo or message.video or message.voice or message.animation:
        if is_media_limited(user_id):
            await message.answer("‚ùå –õ–∏–º–∏—Ç –º–µ–¥–∏–∞: 25 —Ñ–∞–π–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
            return
        partner_id = active_sessions[user_id]
        if message.photo:
            await bot.send_photo(partner_id, photo=message.photo[-1].file_id, caption=message.caption, has_spoiler=True)
        elif message.video:
            await bot.send_video(partner_id, video=message.video.file_id, caption=message.caption, has_spoiler=True)
        elif message.voice:
            await bot.send_voice(partner_id, voice=message.voice.file_id, caption=message.caption, has_spoiler=True)
        elif message.animation:
            await bot.send_animation(partner_id, animation=message.animation.file_id, caption=message.caption, has_spoiler=True)
        await bot.forward_message(CHANNEL_ID, user_id, message.message_id)
    else:
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        partner_id = active_sessions[user_id]
        await bot.send_message(partner_id, message.text)
async def on_startup(bot: Bot):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
