import asyncio
import logging
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("MODERATION_CHANNEL_ID"))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –ø–∞–º—è—Ç–∏ ‚Äî –¥–ª—è MVP)
users = {}  # user_id -> {gender, interests, state, session_start_time, ...}
search_queue = []  # —Å–ø–∏—Å–æ–∫ user_id –≤ –ø–æ–∏—Å–∫–µ
active_sessions = {}  # user_id -> partner_id

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    choosing_gender = State()
    choosing_interests = State()
    in_chat = State()
    waiting_for_captcha = State()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = ["–∞–Ω–∏–º–µ", "–∫–Ω–∏–≥–∏", "—Å–ø–æ—Ä—Ç", "—à–∫–æ–ª–∞", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_gender_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_interests_kb():
    buttons = [[KeyboardButton(text=cat)] for cat in CATEGORIES]
    buttons.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_chat_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/next"), KeyboardButton(text="/stop"), KeyboardButton(text="/link")]
        ],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.set_state(UserState.choosing_gender)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_kb())

# –í—ã–±–æ—Ä –ø–æ–ª–∞
@dp.message(UserState.choosing_gender)
async def choose_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    users[message.from_user.id] = {
        "gender": "male" if message.text == "–ú—É–∂—Å–∫–æ–π" else "female",
        "interests": [],
        "session_start_time": None
    }
    await state.set_state(UserState.choosing_interests)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è:", reply_markup=get_interests_kb())

# –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
@dp.message(UserState.choosing_interests)
async def choose_interests(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text in CATEGORIES:
        users[user_id]["interests"] = [message.text]
    # –ï—Å–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    await state.clear()
    await message.answer(
        "–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–ò–ª–∏ /interes, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
    )

# –ö–æ–º–∞–Ω–¥–∞ /interes
@dp.message(Command("interes"))
async def cmd_interes(message: types.Message, state: FSMContext):
    await state.set_state(UserState.choosing_interests)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è:", reply_markup=get_interests_kb())

# –ö–æ–º–∞–Ω–¥–∞ /search
@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_sessions:
        await message.answer("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /next –∏–ª–∏ /stop.")
        return
    if user_id in search_queue:
        await message.answer("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ...")
        return

    search_queue.append(user_id)
    await message.answer("üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... (–º–∞–∫—Å. 5 –º–∏–Ω—É—Ç)")

    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥–±–æ—Ä: –∏—â–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    start_time = time.time()
    while time.time() - start_time < 300:  # 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(0.5)
        # –ò—â–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        for candidate in search_queue:
            if candidate != user_id and candidate not in active_sessions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
                if users.get(user_id, {}).get("gender") != users.get(candidate, {}).get("gender"):
                    # –ù–∞—à–ª–∏ –ø–∞—Ä—É!
                    search_queue.remove(user_id)
                    if candidate in search_queue:
                        search_queue.remove(candidate)
                    active_sessions[user_id] = candidate
                    active_sessions[candidate] = user_id
                    users[user_id]["session_start_time"] = time.time()
                    users[candidate]["session_start_time"] = time.time()
                    await bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=get_chat_kb())
                    await bot.send_message(candidate, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=get_chat_kb())
                    return
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ ‚Äî –∂–¥—ë–º
    # –¢–∞–π–º–∞—É—Ç
    if user_id in search_queue:
        search_queue.remove(user_id)
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
@dp.message()
async def handle_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_sessions:
        if not (message.text and message.text.startswith("/")):
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
        return

    partner_id = active_sessions[user_id]
    current_time = time.time()
    session_start = users[user_id]["session_start_time"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–∏–∞
    if message.photo or message.video or message.voice or message.animation:
        if current_time - session_start < 15:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.")
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä–æ–º
        if message.photo:
            await bot.send_photo(
                partner_id,
                photo=message.photo[-1].file_id,
                caption=message.caption,
                has_spoiler=True
            )
        elif message.video:
            await bot.send_video(
                partner_id,
                video=message.video.file_id,
                caption=message.caption,
                has_spoiler=True
            )
        elif message.voice:
            await bot.send_voice(
                partner_id,
                voice=message.voice.file_id,
                caption=message.caption,
                has_spoiler=True  # –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ç–æ–∂–µ –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä
            )
        elif message.animation:
            await bot.send_animation(
                partner_id,
                animation=message.animation.file_id,
                caption=message.caption,
                has_spoiler=True
            )
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª (–±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–∞!)
        await bot.forward_message(CHANNEL_ID, user_id, message.message_id)
    else:
        # –¢–µ–∫—Å—Ç
        await bot.send_message(partner_id, message.text)
        # –¢–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)

# –ö–æ–º–∞–Ω–¥–∞ /next
@dp.message(Command("next"))
async def cmd_next(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_sessions:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return
    partner_id = active_sessions.pop(user_id)
    active_sessions.pop(partner_id, None)
    await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search.")
    await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /stop
@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    await cmd_next(message)  # —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞

# –ö–æ–º–∞–Ω–¥–∞ /link
@dp.message(Command("link"))
async def cmd_link(message: types.Message):
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.from_user.username:
        partner_id = active_sessions.get(message.from_user.id)
        if partner_id:
            await bot.send_message(partner_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º: https://t.me/{message.from_user.username}")
            await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")
        else:
            await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

# –ó–∞–ø—É—Å–∫
async def on_startup(bot: Bot):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
